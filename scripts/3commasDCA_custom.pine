// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© rouxam

// Author: rouxam
// Inspired by the original work of ericlin0122

//@version=4
strategy("Backtesting 3commas DCA Bot", overlay=true, pyramiding=99, process_orders_on_close=true, commission_type=strategy.commission.percent, commission_value=0.1)

// Strategy Inputs
price_deviation         = input(1.0, type=input.float,  title='Price deviation to open safety orders (%)', minval=0.0, step=0.1)/100
take_profit             = input(1.0, type=input.float,  title='Target Take Profit (%)', minval=0.0, step=0.1)/100
ttp                     = input(0.5, type=input.float,  title='Trailing Take Profit (%) [0 = Disabled]', minval=0.0, step=0.1)/100
base_order              = input(10.0, type=input.float, title='base order')
safe_order              = input(20.0, type=input.float, title='safe order')
safe_order_volume_scale = input(2.0, type=input.float,  title='Safety order volume scale', step=0.1)
safe_order_step_scale   = input(1.5, type=input.float,  title='Safety order step scale', step=0.1)
max_safe_order          = input(5,                      title='Max safe order', minval=1, maxval=99, step=1)

// Date Inputs
from_month = input(defval = 2, title = "From Month", minval = 1, maxval = 12)
from_day   = input(defval = 10, title = "From Day", minval = 1, maxval = 31)
from_year  = input(defval = 2021, title = "From Year")
to_month   = input(defval = 4, title = "To Month", minval = 1, maxval = 12)
to_day     = input(defval = 21, title = "To Day", minval = 1, maxval = 31)
to_year    = input(defval = 2021, title = "To Year")
start  = timestamp(from_year, from_month, from_day, 00, 00)  // backtest start window
finish = timestamp(to_year, to_month, to_day, 23, 59)        // backtest finish window
window = time >= start and time <= finish ? true : false // create function "within window of time"

// Entry Inputs
oversold                = input(30,                      title='Oversold', minval=1, maxval=99, step=1)
overbought              = input(70,                      title='Overbought', minval=1, maxval=99, step=1)

var bo_level = 0.0
var latest_so_level = 0.0
var next_so_level = 0.0
var ttp_active = false
var ttp_max = 0.0
var ttp_level = 0.0
var take_profit_level = 0.0
var vrsi = 0.0
var length = 7
var co = false

if strategy.position_size <= 0.0
    ttp_max := 0.0
    ttp_active := false

// Calculate RSI
vrsi := rsi(close, length)
co := crossover(vrsi, 30)

// First Position
if(strategy.opentrades == 0 and window and close > 0 and co and not(na(vrsi)))
    // Place Buy Order ASAP
    bo_level := open
    strategy.entry("BO", limit=bo_level, long=strategy.long, qty=base_order/bo_level)
    latest_so_level := open
    co := false

// Dollar Cost Averaging
place_safety_orders = latest_so_level == bo_level
if place_safety_orders
    // Placing all possible exit orders on that candle
    for i = 1 to max_safe_order
        next_so_level := latest_so_level * (1 - price_deviation * pow(safe_order_step_scale,  i - 1))
        so_name = "SO" + tostring(i)
        strategy.entry(so_name, long=strategy.long, limit=next_so_level, qty=safe_order * pow(safe_order_volume_scale, i - 1)/next_so_level)
        latest_so_level := next_so_level

// Take Profit
if strategy.position_size > 0
    take_profit_level := strategy.position_avg_price * (1 + take_profit)
    if ttp <= 0.0
        // No trailing take profit
        strategy.exit(id="TP", limit=take_profit_level)
    else
        // Trailing take profit
        if take_profit_level <= close
            ttp_max := max(high, ttp_max)
            ttp_active := true
        if ttp_active
            // Update exit order
            ttp_level := ttp_max * (1 - ttp)
            strategy.exit(id="TTP", stop=ttp_level)